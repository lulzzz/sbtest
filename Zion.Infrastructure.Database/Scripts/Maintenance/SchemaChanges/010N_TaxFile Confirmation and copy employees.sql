IF Not EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'MasterExtracts'
                 AND COLUMN_NAME = 'ConfirmationNo')
Alter table MasterExtracts Add ConfirmationNo varchar(max), ConfirmationNoUser varchar(max), ConfirmationNoTS datetime;
Go

/****** Object:  StoredProcedure [dbo].[GetExtracts]    Script Date: 19/06/2017 12:06:12 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetExtracts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GetExtracts]
GO
/****** Object:  StoredProcedure [dbo].[GetExtracts]    Script Date: 19/06/2017 12:06:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetExtracts]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetExtracts] AS' 
END
GO
ALTER PROCEDURE [dbo].[GetExtracts]
	@extract varchar(max) = null,
	@id int = null
	
AS
BEGIN
	
	select Id, StartDate, EndDate, ExtractName, IsFederal, DepositDate, Journals, LastModified, LastModifiedBy, ConfirmationNo, ConfirmationNoUser, ConfirmationNoTS, 
	case when @id is not null then
		(select Extract from PaxolArchive.dbo.MasterExtract where MasterExtractId=@id)
		else
			null
		end Extract
	from MasterExtracts
	Where 
	((@id is not null and Id=@id) or (@id is null))
	and ((@extract is not null and ExtractName=@extract) or (@extract is null))
	for Xml path('MasterExtractJson'), root('MasterExtractList') , elements, type
		
	

END
GO

/****** Object:  StoredProcedure [dbo].[CopyEmployees]    Script Date: 19/06/2017 11:58:51 AM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CopyEmployees]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CopyEmployees]
GO
/****** Object:  StoredProcedure [dbo].[CopyEmployees]    Script Date: 19/06/2017 11:58:51 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CopyEmployees]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[CopyEmployees] AS' 
END
GO
/****** Object:  Stored Procedure dbo.usp_AddCompany    Script Date: 3/21/2006 4:24:45 PM ******/
------------------------------------------------------------------------------------------------------------------------
-- Date Created: Friday, October 01, 2004
-- Created By:   Generated by CodeSmith
------------------------------------------------------------------------------------------------------------------------
ALTER PROCEDURE [dbo].[CopyEmployees]
	@oldCompanyId uniqueidentifier,
	@CompanyID uniqueidentifier ,
	@employeeIds varchar(max) = null,
	@LastModifiedBy varchar(max),
	@KeepEmployeeNumbers bit =1
AS

declare @tmpEmployees table (
		id uniqueidentifier not null
	)
	insert into @tmpEmployees
	select convert(uniqueidentifier, id) id
	from
	(SELECT 
		 cast(rtrim(ltrim(Split.a.value('.', 'varchar(max)'))) as nvarchar(36)) AS id  
	FROM  
	(
		SELECT CAST ('<M>' + REPLACE(@employeeIds, ',', '</M><M>') + '</M>' AS XML) AS CVS 
	) AS A CROSS APPLY CVS.nodes ('/M') AS Split(a)
	) b
	where b.id<>''


if not exists(select 'x' from Employee Where CompanyId=@oldCompanyId
	and ((@employeeIds is null) or (@employeeIds is not null and exists(select 'x' from @tmpEmployees where id=Employee.Id)))
	and not exists(select 'x' from Employee e1 where e1.CompanyId=@CompanyID and e1.SSN=Employee.SSN)
	)
	begin
		RAISERROR('All Employees already exist in the target company',16,1);
		return;
	end

insert into CompanyDeduction(CompanyId, TypeId, Name, Description, AnnualMax)
select @CompanyID, TypeId, Name, Description, AnnualMax from CompanyDeduction 
where CompanyId=@oldCompanyId 
and not exists(select 'x' from CompanyDeduction cd where cd.CompanyId=@CompanyID and cd.TypeId=TypeId and cd.Name=Name);

select a.Id as olddedid, b.Id as newdedid into #dedTable from
(select * from CompanyDeduction where companyid=@oldcompanyid)a,
(select * from CompanyDeduction where companyid=@companyid)b 
where a.TypeId = b.TypeId and a.Name=b.Name;

insert into CompanyWorkerCompensation(CompanyId, Code, Description, Rate, MinGrossWage)
select @CompanyId, Code, Description, Rate, MinGrossWage from CompanyWorkerCompensation 
where CompanyId=@oldCompanyId
and not exists(select 'x' from CompanyWorkerCompensation cw where cw.CompanyId=@CompanyID and cw.Code=Code);

select a.Id as oldwcid, b.Id as newwcid into #wcTable from
(select * from CompanyWorkerCompensation where companyid=@oldcompanyid)a,
(select * from CompanyWorkerCompensation where companyid=@companyid)b 
where a.Code = b.Code;

	insert into Employee(CompanyId, StatusId, FirstName, MiddleInitial, LastName, Contact, Gender, SSN, BirthDate, 
	HireDate, Department, EmployeeNo, Memo, PayrollSchedule, PayType, Rate, PayCodes, Compensations, PaymentMethod, 
	DirectDebitAuthorized, TaxCategory, FederalStatus, FederalExemptions, FederalAdditionalAmount, State, 
	LastModified, LastModifiedBy, WorkerCompensationId, CompanyEmployeeNo, Notes, SickLeaveHireDate, CarryOver)
	select @CompanyId, StatusId, FirstName, MiddleInitial, LastName, Contact, Gender, SSN, BirthDate, HireDate, Department, EmployeeNo, Memo, 
	PayrollSchedule, PayType, Rate, PayCodes, Compensations, PaymentMethod, DirectDebitAuthorized, TaxCategory, FederalStatus, FederalExemptions, FederalAdditionalAmount, 
	State, GETDATE(), @LastModifiedBy,
	case when WorkerCompensationId is not null then
		(select top(1) newwcid from #wcTable where oldwcid=WorkerCompensationId)
		else
			null
		end, 
	case when @KeepEmployeeNumbers=1 then
		CompanyEmployeeNo
		else
		(isnull((select max(em.CompanyEmployeeNo) from Employee em where em.CompanyId=@CompanyID),0)+ROW_NUMBER() OVER(ORDER BY FirstName ASC)) 
		end
		, Notes, SickLeaveHireDate, CarryOver
	from Employee Where CompanyId=@oldCompanyId
	and ((@employeeIds is null) or (@employeeIds is not null and exists(select 'x' from @tmpEmployees where id=Employee.Id)))
	and not exists(select 'x' from Employee e1 where e1.CompanyId=@CompanyID and e1.SSN=Employee.SSN)


	select a.Id as oldempid, b.Id as newempid into #empTable from
	(select * from Employee where companyid=@oldcompanyid)a,
	(select * from Employee where companyid=@CompanyID)b 
	where a.SSN=b.SSN
	and (@employeeIds is null or (@employeeIds is not null and a.Id in (select id from @tmpEmployees)));

	insert into EmployeeDeduction(EmployeeId, Method, Rate, AnnualMax, CompanyDeductionId)
	select (select newempid from #empTable where oldempid=ed.EmployeeId), Method, Rate, AnnualMax, 
		(select newdedid from #dedTable where olddedid=ed.CompanyDeductionId)
	from EmployeeDeduction ed where ed.employeeid in (select oldempid from #empTable)
	and not exists(select 'x' from EmployeeDeduction ed2 where ed2.EmployeeId=(select newempid from #empTable where oldempid=ed.EmployeeId) and ed2.CompanyDeductionId=(select newdedid from #dedTable where olddedid=ed.CompanyDeductionId));

	insert into BankAccount(EntityTypeId, EntityId, AccountType, BankName, AccountName, AccountNumber, RoutingNumber, LastModified, LastModifiedBy, FractionId)
	select EntityTypeId, (select newempid from #empTable where oldempid=EntityId), 
	AccountType, BankName, AccountName, AccountNumber, RoutingNumber, LastModified, LastModifiedBy, FractionId
	from BankAccount
	Where EntityTypeId=3
	and EntityId in (select oldempid from #empTable)
	and not exists(select 'x' from BankAccount ba2 where ba2.EntityTypeId=3 and ba2.EntityId=(select newempid from #empTable where oldempid=BankAccount.EntityId) and ba2.AccountType=AccountType 
	and ba2.BankName=BankName and ba2.AccountNumber=AccountNumber and ba2.RoutingNumber=RoutingNumber);

	insert into EmployeeBankAccount(EmployeeId, BankAccountId, Percentage)
	select (select newempid from #empTable where oldempid=EmployeeId), 
	(select Id from BankAccount ba where ba.EntityTypeId=3 and ba.EntityId=(select newempid from #empTable where oldempid=EmployeeId) and ba.AccountType=BankAccount.AccountType and ba.BankName=BankAccount.BankName and ba.AccountNumber=BankAccount.AccountNumber and ba.RoutingNumber=BankAccount.RoutingNumber),
	Percentage
	from EmployeeBankAccount, BankAccount
	where 
	EmployeeBankAccount.BankAccountId = BankAccount.Id
	and EmployeeId in (select oldempid from #empTable)
	and not exists(select 'x' from EmployeeBankAccount eba2 where eba2.EmployeeId=(select newempid from #empTable where oldempid=EmployeeBankAccount.EmployeeId)
		and eba2.BankAccountId=(select Id from BankAccount ba2 where ba2.EntityTypeId=3 and ba2.EntityId=(select newempid from #empTable where oldempid=EmployeeBankAccount.EmployeeId) 
				and ba2.AccountType=BankAccount.AccountType 
				and ba2.BankName=BankAccount.BankName and ba2.AccountNumber=BankAccount.AccountNumber and ba2.RoutingNumber=BankAccount.RoutingNumber)
	);

	--entity relations
	select * into #tmperee  from EntityRelation where SourceEntityTypeId=3 and SourceEntityId in (select oldempid from #empTable);
	update #tmperee set sourceentityid=(select newempid from #empTable where oldempid=SourceEntityId);
	insert into EntityRelation(SourceEntityTypeId, TargetEntityTypeId, SourceEntityId, TargetEntityId, TargetObject) select SourceEntityTypeId, TargetEntityTypeId, SourceEntityId, TargetEntityId, TargetObject from #tmperee;
GO
