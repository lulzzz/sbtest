/****** Object:  StoredProcedure [dbo].[CopyEmployees]    Script Date: 12/05/2017 9:55:27 AM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CopyEmployees]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CopyEmployees]
GO
/****** Object:  StoredProcedure [dbo].[CopyEmployees]    Script Date: 12/05/2017 9:55:27 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CopyEmployees]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[CopyEmployees] AS' 
END
GO
/****** Object:  Stored Procedure dbo.usp_AddCompany    Script Date: 3/21/2006 4:24:45 PM ******/
------------------------------------------------------------------------------------------------------------------------
-- Date Created: Friday, October 01, 2004
-- Created By:   Generated by CodeSmith
------------------------------------------------------------------------------------------------------------------------
ALTER PROCEDURE [dbo].[CopyEmployees]
	@oldCompanyId uniqueidentifier,
	@CompanyID uniqueidentifier ,
	@employeeIds varchar(max) = null,
	@LastModifiedBy varchar(max),
	@KeepEmployeeNumbers bit =1
AS

declare @tmpEmployees table (
		id uniqueidentifier not null
	)
	insert into @tmpEmployees
	select convert(uniqueidentifier, id) id
	from
	(SELECT 
		 cast(rtrim(ltrim(Split.a.value('.', 'varchar(max)'))) as nvarchar(36)) AS id  
	FROM  
	(
		SELECT CAST ('<M>' + REPLACE(@employeeIds, ',', '</M><M>') + '</M>' AS XML) AS CVS 
	) AS A CROSS APPLY CVS.nodes ('/M') AS Split(a)
	) b
	where b.id<>''


if not exists(select 'x' from Employee Where CompanyId=@oldCompanyId
	and ((@employeeIds is null) or (@employeeIds is not null and exists(select 'x' from @tmpEmployees where id=Employee.Id)))
	and not exists(select 'x' from Employee e1 where e1.CompanyId=@CompanyID and e1.SSN=Employee.SSN)
	)
	begin
		RAISERROR('All Employees already exist in the target company',16,1);
		return;
	end

insert into CompanyDeduction(CompanyId, TypeId, Name, Description, AnnualMax)
select @CompanyID, TypeId, Name, Description, AnnualMax from CompanyDeduction 
where CompanyId=@oldCompanyId 
and not exists(select 'x' from CompanyDeduction cd where cd.CompanyId=@CompanyID and cd.TypeId=TypeId and cd.Name=Name);

select a.Id as olddedid, b.Id as newdedid into #dedTable from
(select * from CompanyDeduction where companyid=@oldcompanyid)a,
(select * from CompanyDeduction where companyid=@companyid)b 
where a.TypeId = b.TypeId and a.Name=b.Name;

insert into CompanyWorkerCompensation(CompanyId, Code, Description, Rate, MinGrossWage)
select @CompanyId, Code, Description, Rate, MinGrossWage from CompanyWorkerCompensation 
where CompanyId=@oldCompanyId
and not exists(select 'x' from CompanyWorkerCompensation cw where cw.CompanyId=@CompanyID and cw.Code=Code);

select a.Id as oldwcid, b.Id as newwcid into #wcTable from
(select * from CompanyWorkerCompensation where companyid=@oldcompanyid)a,
(select * from CompanyWorkerCompensation where companyid=@companyid)b 
where a.Code = b.Code;

	insert into Employee(CompanyId, StatusId, FirstName, MiddleInitial, LastName, Contact, Gender, SSN, BirthDate, 
	HireDate, Department, EmployeeNo, Memo, PayrollSchedule, PayType, Rate, PayCodes, Compensations, PaymentMethod, 
	DirectDebitAuthorized, TaxCategory, FederalStatus, FederalExemptions, FederalAdditionalAmount, State, 
	LastModified, LastModifiedBy, WorkerCompensationId, CompanyEmployeeNo, Notes, SickLeaveHireDate, CarryOver)
	select @CompanyId, StatusId, FirstName, MiddleInitial, LastName, Contact, Gender, SSN, BirthDate, HireDate, Department, EmployeeNo, Memo, 
	PayrollSchedule, PayType, Rate, PayCodes, Compensations, PaymentMethod, DirectDebitAuthorized, TaxCategory, FederalStatus, FederalExemptions, FederalAdditionalAmount, 
	State, GETDATE(), @LastModifiedBy,
	case when WorkerCompensationId is not null then
		(select top(1) newwcid from #wcTable where oldwcid=WorkerCompensationId)
		else
			null
		end, 
	case when @KeepEmployeeNumbers=1 then
		CompanyEmployeeNo
		else
		(isnull((select max(em.CompanyEmployeeNo) from Employee em where em.CompanyId=@CompanyID),0)+ROW_NUMBER() OVER(ORDER BY FirstName ASC)) 
		end
		, Notes, SickLeaveHireDate, CarryOver
	from Employee Where CompanyId=@oldCompanyId
	and ((@employeeIds is null) or (@employeeIds is not null and exists(select 'x' from @tmpEmployees where id=Employee.Id)))
	and not exists(select 'x' from Employee e1 where e1.CompanyId=@CompanyID and e1.SSN=Employee.SSN)


	select a.Id as oldempid, b.Id as newempid into #empTable from
	(select * from Employee where companyid=@oldcompanyid)a,
	(select * from Employee where companyid=@CompanyID)b 
	where a.SSN=b.SSN;

	insert into EmployeeDeduction(EmployeeId, Method, Rate, AnnualMax, CompanyDeductionId)
	select (select newempid from #empTable where oldempid=ed.EmployeeId), Method, Rate, AnnualMax, 
		(select newdedid from #dedTable where olddedid=ed.CompanyDeductionId)
	from EmployeeDeduction ed where ed.employeeid in (select oldempid from #empTable)
	and not exists(select 'x' from EmployeeDeduction ed2 where ed2.EmployeeId=(select newempid from #empTable where oldempid=ed.EmployeeId) and ed2.CompanyDeductionId=(select newdedid from #dedTable where olddedid=ed.CompanyDeductionId));

	insert into BankAccount(EntityTypeId, EntityId, AccountType, BankName, AccountName, AccountNumber, RoutingNumber, LastModified, LastModifiedBy, FractionId)
	select EntityTypeId, (select newempid from #empTable where oldempid=EntityId), 
	AccountType, BankName, AccountName, AccountNumber, RoutingNumber, LastModified, LastModifiedBy, FractionId
	from BankAccount
	Where EntityTypeId=3
	and EntityId in (select oldempid from #empTable)
	and not exists(select 'x' from BankAccount ba2 where ba2.EntityTypeId=3 and ba2.EntityId=(select newempid from #empTable where oldempid=BankAccount.EntityId) and ba2.AccountType=AccountType 
	and ba2.BankName=BankName and ba2.AccountNumber=AccountNumber and ba2.RoutingNumber=RoutingNumber);

	insert into EmployeeBankAccount(EmployeeId, BankAccountId, Percentage)
	select (select newempid from #empTable where oldempid=EmployeeId), 
	(select Id from BankAccount ba where ba.EntityTypeId=3 and ba.EntityId=(select newempid from #empTable where oldempid=EmployeeId) and ba.AccountType=BankAccount.AccountType and ba.BankName=BankAccount.BankName and ba.AccountNumber=BankAccount.AccountNumber and ba.RoutingNumber=BankAccount.RoutingNumber),
	Percentage
	from EmployeeBankAccount, BankAccount
	where 
	EmployeeBankAccount.BankAccountId = BankAccount.Id
	and EmployeeId in (select oldempid from #empTable)
	and not exists(select 'x' from EmployeeBankAccount eba2 where eba2.EmployeeId=(select newempid from #empTable where oldempid=EmployeeBankAccount.EmployeeId)
		and eba2.BankAccountId=(select Id from BankAccount ba2 where ba2.EntityTypeId=3 and ba2.EntityId=(select newempid from #empTable where oldempid=EmployeeBankAccount.EmployeeId) 
				and ba2.AccountType=BankAccount.AccountType 
				and ba2.BankName=BankAccount.BankName and ba2.AccountNumber=BankAccount.AccountNumber and ba2.RoutingNumber=BankAccount.RoutingNumber)
	);

	--entity relations
	select * into #tmperee  from EntityRelation where SourceEntityTypeId=3 and SourceEntityId in (select oldempid from #empTable);
	update #tmperee set sourceentityid=(select newempid from #empTable where oldempid=SourceEntityId);
	insert into EntityRelation(SourceEntityTypeId, TargetEntityTypeId, SourceEntityId, TargetEntityId, TargetObject) select SourceEntityTypeId, TargetEntityTypeId, SourceEntityId, TargetEntityId, TargetObject from #tmperee;
GO

/****** Object:  StoredProcedure [dbo].[CopyCompany]    Script Date: 12/05/2017 10:01:31 AM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CopyCompany]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CopyCompany]
GO
/****** Object:  StoredProcedure [dbo].[CopyCompany]    Script Date: 12/05/2017 10:01:31 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CopyCompany]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[CopyCompany] AS' 
END
GO
/****** Object:  Stored Procedure dbo.usp_AddCompany    Script Date: 3/21/2006 4:24:45 PM ******/
------------------------------------------------------------------------------------------------------------------------
-- Date Created: Friday, October 01, 2004
-- Created By:   Generated by CodeSmith
------------------------------------------------------------------------------------------------------------------------
ALTER PROCEDURE [dbo].[CopyCompany]
	@oldHost uniqueidentifier,
	@newHost uniqueidentifier,
	@oldCompanyId uniqueidentifier,
	@CompanyID uniqueidentifier ,
	@LastModifiedBy varchar(max),
	@copyEmployees bit,
	@copyPayrolls bit,
	@payrollStart DateTime = null,
	@payrollEnd DateTime = null
AS

--company
select * into #tempcomp from Company where Id=@oldCompanyId;
update #tempcomp set HostId = @newHost, Id=@CompanyID, LastModifiedBy=@LastModifiedBy, LastModified=GetDate();
declare @isPEOHost bit
select @isPEOHost = IsPeoHost from Host where Id=@newHost
if @isPEOHost=1
	update #tempcomp set FileUnderHost=1, ManageEFileForms=1, ManageTaxPayment=1;

insert into Company([Id], [CompanyName],[CompanyNo],[HostId],[StatusId],[IsVisibleToHost],[FileUnderHost],[DirectDebitPayer],[PayrollDaysInPast],[InsuranceGroupNo],[TaxFilingName],[CompanyAddress],[BusinessAddress],[IsAddressSame],[ManageTaxPayment],[ManageEFileForms],[FederalEIN],[FederalPin],[DepositSchedule941],[PayrollSchedule],[PayCheckStock],[IsFiler944],[LastModifiedBy],[LastModified],[MinWage],[IsHostCompany],[Memo],[ClientNo],[Created],[ParentId],[Notes])
select [Id], [CompanyName],[CompanyNo],[HostId],[StatusId],[IsVisibleToHost],[FileUnderHost],[DirectDebitPayer],[PayrollDaysInPast],[InsuranceGroupNo],[TaxFilingName],[CompanyAddress],[BusinessAddress],[IsAddressSame],[ManageTaxPayment],[ManageEFileForms],[FederalEIN],[FederalPin],[DepositSchedule941],[PayrollSchedule],[PayCheckStock],[IsFiler944],[LastModifiedBy],[LastModified],[MinWage],[IsHostCompany],[Memo],[ClientNo],[Created],[ParentId],[Notes] from #tempcomp;

--contract
insert into CompanyContract(CompanyId, Type, PrePaidSubscriptionType, BillingType, CardDetails, BankDetails, InvoiceRate, Method, InvoiceSetup)
select @CompanyId, Type, PrePaidSubscriptionType, BillingType, CardDetails, BankDetails, InvoiceRate, Method, InvoiceSetup from CompanyContract where CompanyId=@oldCompanyId;

--entity relations
select * into #tmper  from EntityRelation where SourceEntityTypeId=2 and SourceEntityId=@oldCompanyId;
update #tmper set sourceentityid=@CompanyID;
insert into EntityRelation(SourceEntityTypeId, TargetEntityTypeId, SourceEntityId, TargetEntityId, TargetObject) select SourceEntityTypeId, TargetEntityTypeId, SourceEntityId, TargetEntityId, TargetObject from #tmper;

--deductions
insert into CompanyDeduction(CompanyId, TypeId, Name, Description, AnnualMax)
select @CompanyID, TypeId, Name, Description, AnnualMax from CompanyDeduction where CompanyId=@oldCompanyId;

select a.Id as olddedid, b.Id as newdedid into #dedTable from
(select * from CompanyDeduction where companyid=@oldcompanyid)a,
(select * from CompanyDeduction where companyid=@companyid)b 
where a.TypeId = b.TypeId and a.Name=b.Name;

--pay codes
insert into CompanyPayCode(CompanyId, Code, Description, HourlyRate)
select @CompanyID, Code, Description, HourlyRate from CompanyPayCode where CompanyId=@oldCompanyId;

--Accumulated Pay type
insert into CompanyAccumlatedPayType(PayTypeId, CompanyId, RatePerHour, AnnualLimit)
select PayTypeId, @CompanyID, RatePerHour, AnnualLimit from CompanyAccumlatedPayType where CompanyId=@oldCompanyId;

--Company State
insert into CompanyTaxState(CompanyId, CountryId, StateId, StateCode, StateName, EIN, Pin)
select @CompanyID, CountryId, StateId, StateCode, StateName, EIN, Pin from CompanyTaxState where CompanyId=@oldCompanyId;

--Company Tax rate
insert into CompanyTaxRate(CompanyId, TaxId, TaxYear, Rate)
select @CompanyID, TaxId, TaxYear, Rate from CompanyTaxRate where CompanyId=@oldCompanyId;

-- worker compensation
insert into CompanyWorkerCompensation(CompanyId, Code, Description, Rate, MinGrossWage)
select @CompanyId, Code, Description, Rate, MinGrossWage from CompanyWorkerCompensation where CompanyId=@oldCompanyId;

select a.Id as oldwcid, b.Id as newwcid into #wcTable from
(select * from CompanyWorkerCompensation where companyid=@oldcompanyid)a,
(select * from CompanyWorkerCompensation where companyid=@companyid)b 
where a.Code = b.Code;

-- vednor customers
insert into VendorCustomer(Id, CompanyId, Name, StatusId, AccountNo, IsVendor, IsVendor1099, Contact, Note, Type1099, SubType1099, IdentifierType, IndividualSSN, BusinessFIN, LastModified, LastModifiedBy)
select newid(),@CompanyId, Name, StatusId, AccountNo, IsVendor, IsVendor1099, Contact, Note, Type1099, SubType1099, IdentifierType, IndividualSSN, BusinessFIN, GETDATE(), LastModifiedBy from VendorCustomer where CompanyId=@oldCompanyId;

----vendor customer id old and new
select a.Id as oldvcid, b.Id as newvcid into #vcTable from
(select * from vendorcustomer where companyid=@oldcompanyid)a,
(select * from vendorcustomer where companyid=@companyid)b 
where a.Name=b.Name and a.individualssn=b.individualssn and a.BusinessFIN=b.BusinessFIN;

-----bank accounts
insert into BankAccount(EntityTypeId, EntityId, AccountType, BankName, AccountName, AccountNumber, RoutingNumber, LastModified, LastModifiedBy)
select EntityTypeId, @CompanyID, AccountType, BankName, AccountName, AccountNumber, RoutingNumber, GETDATE(), @LastModifiedBy from BankAccount where EntityTypeId=2 and EntityId=@oldCompanyId;

select a.Id as oldbankid, b.Id as newbankid into #bankTable from
(select * from BankAccount where EntityTypeId=2 and EntityId=@oldcompanyid)a,
(select * from BankAccount where EntityTypeId=2 and EntityId=@companyid)b 
where a.AccountNumber=b.AccountNumber and a.RoutingNumber=b.RoutingNumber and a.AccountName=b.AccountName and a.AccountType=b.AccountType;

insert into CompanyAccount(CompanyId, Type, SubType, Name, TaxCode, TemplateId, OpeningBalance, OpeningDate, BankAccountId, LastModified, LastModifiedBy, UsedInPayroll)
select @CompanyId, Type, SubType, Name, TaxCode, TemplateId, OpeningBalance, OpeningDate, 
case when BankAccountId is not null then
	(select top(1) newbankid from #bankTable where oldbankid=BankAccountId)
	else
		null
	end
BankAccountId, getdate(), @LastModifiedBy, UsedInPayroll 
from CompanyAccount Left outer join BankAccount on CompanyAccount.BankAccountId = BankAccount.Id
Where CompanyId = @oldCompanyId

GO

/****** Object:  StoredProcedure [dbo].[GetHostAndCompanies]    Script Date: 22/05/2017 6:14:17 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetHostAndCompanies]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GetHostAndCompanies]
GO
/****** Object:  StoredProcedure [dbo].[GetHostAndCompanies]    Script Date: 22/05/2017 6:14:17 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetHostAndCompanies]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetHostAndCompanies] AS' 
END
GO
ALTER PROCEDURE [dbo].[GetHostAndCompanies]
	@host varchar(max) = null,
	@company varchar(max) = null,
	@role varchar(max) = null
AS
BEGIN
	declare @rootHost uniqueidentifier
	select @rootHost = RootHostId from ApplicationConfiguration

	select 
		(
			select Id, FirmName, Url, EffectiveDate, CompanyId, HomePage,
			(select top(1) TargetObject from EntityRelation Where SourceEntityTypeId=1 and SourceEntityId=Id and TargetEntityTypeId=4 order by EntityRelation.EntityRelationId desc) Contact,
			(select DirectDebitPayer from Company where HostId=Host.Id and IsHostCompany=1) IsHostAllowsDirectDebit
			from Host 
			where ((@host is not null and Id=@host) or (@host is null))
			for xml path ('HostListItem'), elements, type
		)Hosts,
		(
			select Id, HostId, CompanyName Name, CompanyNumber, CompanyNo, LastPayrollDate, FileUnderHost, IsHostCompany, Created, 
				case StatusId When 1 then 'Active' When 2 then 'InActive' else 'Terminated' end StatusId,
				(select InvoiceSetup from CompanyContract cc where cc.CompanyId=Company.Id) InvoiceSetup,
				CompanyAddress, FederalEIN,
				(select * from CompanyTaxState Where CompanyId=Company.Id for xml auto, elements, type) CompanyTaxStates, 
				(select * from InsuranceGroup Where Id=Company.InsuranceGroupNo for xml auto, elements, type),
				(select top(1) TargetObject from EntityRelation Where SourceEntityTypeId=2 and SourceEntityId=Id and TargetEntityTypeId=4 order by EntityRelation.EntityRelationId desc) Contact
			from Company
			where 
			((@company is not null and Id=@company) or (@company is null))
			and (
					(@role is not null and @role='HostStaff' and IsHostCompany=0) 
					or (@role is not null and @role='CorpStaff' and IsHostCompany=0) 
					or (@role is null or @role='Company' or @role='Employee')
				)
			for xml path ('CompanyListItem'), elements, type
		)Companies
	for xml path('HostAndCompanies')
	

END
GO
